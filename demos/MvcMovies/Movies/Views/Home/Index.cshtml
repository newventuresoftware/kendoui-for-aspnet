@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container">
    <h2>Telerik UI for ASP.NET MVC - Movies Grid</h2>

    @Html.Kendo().Culture()

    @(Html.Kendo()
        .Grid<Movies.Models.Movie>()
        .Name("grid")
        .Columns(column =>
        {
            column.Bound(model => model.Title);
            column.Bound(model => model.Genre)
                // you can explicitly request for a specific editor template (templates are located at ~/Views/Shared/EditorTemplates)                
                // here I'm using the kendo DropDownList as editor
                // then I'm passing some values to populate it
                .EditorTemplateName("GridForeignKey")
                .EditorViewData(new { Genre_Data = new SelectList(new List<string>() { "Comedy", "Crime", "Drama", "Fantasy" }) });
            column.Bound(model => model.Rating)
                .EditorTemplateName("Number")
                // with client templates you can customize the default presentation behaviour
                // https://docs.telerik.com/aspnet-mvc/helpers/grid/configuration#clienttemplate
                .ClientTemplate("#= kendo.toString(Rating, 'n1') # / 10");
            column.Bound(model => model.ReleaseDate);
            column.Command(command =>
            {
                command.Edit();
                command.Destroy();
            });
        })
        .ToolBar(bar =>
        {
            bar.Create();
            bar.Excel();
        })
        .DataSource(dataSource =>
        {
            dataSource
                // note that in Ajax mode the method of all CRUD requests is POST
                .Ajax()
                .PageSize(10)
                .Model(m => m.Id(movie => movie.Title))
                .Update(update => update.Action("EditMovie", "Movies"))
                .Destroy(destroy => destroy.Action("DeleteMovie", "Movies"))
                .Create(create => create.Action("CreateMovie", "Movies"))
                .Read(read => read.Action("GetMovies", "Movies"))
                // client-side events are naturally handled in JavaScript code
                // so in the Telerik UI ASP.NET MVC wrapper you just specify the name of the JS function to handle the event
                // the "onError" func is defined in the script tag down below the wrapper code
                .Events(events => events.Error("onError"));
        })
        .Pageable(page => page.PageSizes(new int[] { 5, 10, 20 }))
        .Filterable()
        .Groupable()
        .Sortable()
        // again providing just the name of the JS function which will handle the event
        .Events(events => events.Save("onSave"))
        .Excel(export => export.AllPages(true).FileName("movies.xlsx")))

    <script>
        function onSave(event) {
            console.log(event);
        }

        function onError(event) {
            alert(event.errorThrown);
        }
    </script>

</div>